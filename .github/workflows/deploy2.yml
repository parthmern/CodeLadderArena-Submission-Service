name: new ec2 Build and Deploy to Docker Hub as Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      PORT: ${{ secrets.PORT }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      ATLAS_DB_URL: ${{ secrets.ATLAS_DB_URL }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      PROBLEM_ADMIN_SERVICE_URL: ${{ secrets.PROBLEM_ADMIN_SERVICE_URL }}
      SOCKET_SERVICE_URL: ${{ secrets.SOCKET_SERVICE_URL }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2

      - name: Install Node modules "npm install"
        run: npm ci

      - name: Running Tests "npm run test"
        run: npm run test

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: pptl8685/submission-service-ss:latest
          build-args: |
            PORT=${{ secrets.PORT }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            ATLAS_DB_URL=${{ secrets.ATLAS_DB_URL }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            PROBLEM_ADMIN_SERVICE_URL=${{ secrets.PROBLEM_ADMIN_SERVICE_URL }}
            SOCKET_SERVICE_URL=${{ secrets.SOCKET_SERVICE_URL }}
          no-cache: true  # Ensures no cache is used during the build

      - name: Verify Pushed Image
        run: docker pull pptl8685/submission-service-ss:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_NEW }}
          username: ${{ secrets.SSH_USERNAME_NEW }}
          key: ${{ secrets.SSH_KEY_NEW }}
          script: |
            # Pull the latest image
            sudo docker pull pptl8685/submission-service-ss:latest

            # Stop and remove the existing container if it exists
            sudo docker stop web-app-ss || true
            sudo docker rm web-app-ss || true

            # Run the container with environment variables
            sudo docker run -d --name web-app-ss -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
              -e PORT=${{ secrets.PORT }} \
              -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              -e ATLAS_DB_URL=${{ secrets.ATLAS_DB_URL }} \
              -e NODE_ENV=${{ secrets.NODE_ENV }} \
              -e PROBLEM_ADMIN_SERVICE_URL=${{ secrets.PROBLEM_ADMIN_SERVICE_URL }} \
              -e SOCKET_SERVICE_URL=${{ secrets.SOCKET_SERVICE_URL }} \
              pptl8685/submission-service-ss:latest

            # Wait for the container to start before running the exec command
            sleep 5

            # Print all environment variables inside the running container
            sudo docker exec web-app-ss env

            # Set the container to restart automatically if needed
            sudo docker update --restart=always web-app-ss
